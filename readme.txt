




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

gettimeofday	:	int gettimeofday(struct timeval *tv, struct timezone *tz);

parameters		:
					tv: A pointer to a struct timeval where the current time will be stored.

					tz: A pointer to a struct timezone where the time zone information will be stored.
					This parameter is usually ignored, and it can be set to NULL in most cases.

Return value	:

					The function returns 0 on success, and -1 on failure.
					If there is an error, errno is set to indicate the error.




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_create : pthread_create(&t1, NULL, &routine, NULL);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_detach :



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_join :


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_mutex_init :


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_mutex_destroy :


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_mutex_lock :


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pthread_mutex_unlock :


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


|- Each philo must be represented as a separete thread

|- There is one fork between each pair of philosophers.

|- Each fork's need to be protect with a mutex, so philosophers won't duplicate them.